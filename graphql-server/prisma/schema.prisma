datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
 
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    EntityCreator Entity[]  @relation("EntityCreator")
    EntityUpdater Entity[]  @relation("EntityUpdater")
    EntityDeleter Entity[]  @relation("EntityDeleter")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

model Entity {
    id       String    @id @default(cuid())
    name     String
    location String
    address  String
    logo     String
    visitors Visitor[]
    menu Menu[]
    MenuCreator  Menu[]  @relation("MenuCreator")
    MenuUpdater  Menu[]  @relation("MenuUpdater")
    MenuDeleter Menu[]  @relation("MenuDeleter")
    Creator   User?    @relation("EntityCreator", fields: [createdBy], references: [id])
    createdBy String?
    createdAt DateTime @default(now())
    Updater   User?    @relation("EntityUpdater", fields: [updatedBy], references: [id])
    updatedBy String?
    updatedAt DateTime @updatedAt
    Deleter   User?     @relation("EntityDeleter", fields: [deletedBy], references: [id])
    deletedBy String?
    deletedAt DateTime?
}

model Visitor {
    id       String   @id @default(cuid())
    fullName String
    email    String
    mobile   String
    checkIn  DateTime
    checkOut DateTime
    entityId String
    entity   Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
}

model Menu {
  id  String @id @default(cuid())
  categories Categories[]
  CategoriesCreator Categories[]  @relation("CategoriesCreator")
  CategoriesUpdater Categories[]  @relation("CategoriesUpdater")
  CategoriesDeleter Categories[]  @relation("CategoriesDeleter")
  entityId String
  entity Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  Creator   Entity?    @relation("MenuCreator", fields: [createdBy], references: [id])
  createdBy String?
  createdAt DateTime @default(now())
  Updater   Entity?    @relation("MenuUpdater", fields: [updatedBy], references: [id])
  updatedBy String?
  updatedAt DateTime @updatedAt
  Deleter   Entity?     @relation("MenuDeleter", fields: [deletedBy], references: [id])
  deletedBy String?
  deletedAt DateTime?
}
model Categories {
  id String @id @default(cuid())
  menuId String
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)
  Creator   Menu?    @relation("CategoriesCreator", fields: [createdBy], references: [id])
  createdBy String?
  createdAt DateTime @default(now())
  Updater   Menu?    @relation("CategoriesUpdater", fields: [updatedBy], references: [id])
  updatedBy String?
  updatedAt DateTime @updatedAt
  Deleter   Menu?     @relation("CategoriesDeleter", fields: [deletedBy], references: [id])
  deletedBy String?
  deletedAt DateTime?
}

